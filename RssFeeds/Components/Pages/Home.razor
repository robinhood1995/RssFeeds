@page "/"
@using Microsoft.EntityFrameworkCore
@using RssFeeds.Models
@inject NavigationManager NavigationManager
@inject IConfiguration _config
@inject IJSRuntime jsRuntime
@inject IDbContextFactory<RssFeeds.Models.NewsFeedContext> DbFactory
@implements IDisposable

@if (RssItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Link</th>
                <th>Publication Date</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in RssItems)
            {
                <tr>
                    <td>@item.Title</td>
                    <td><a href="@item.Link" target="_blank">@item.Link</a></td>
                    <td>@item.PublicationDate!.Value.ToString("yyyy-MM-dd")</td>
                    <td>@item.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    
    private NewsFeedContext context = default!;
    
    private List<NewsFeed> RssItems;
    private Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        await LoadData();
        _timer = new Timer(async _ => await LoadData(), null, TimeSpan.FromSeconds(60), TimeSpan.FromSeconds(60)); // refresh every 5 seconds.
    }

    private async Task LoadData()
    {

        RssItems = null; // Clear the data.
        StateHasChanged(); // Force a re-render to show the loading indicator.
        RssItems = await context.NewsFeeds.OrderByDescending(item => item.PublicationDate).ToListAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}